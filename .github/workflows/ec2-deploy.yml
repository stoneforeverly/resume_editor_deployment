name: EC2 Deploy

on:
  workflow_dispatch:
env:
  AWS_REGION: ap-southeast-2
  UPDATE_SCRIPT: .github/workflows/ec2_update.sh
  EC2_IP: 3.107.160.80
  SSH_USER: ec2-user

jobs:
  deploy:
    name: Deploy Docker Images to EC2
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Set up AWS CLI
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup SSH and Deploy
      run: |
        # Install dependencies
        sudo apt-get update -y
        sudo apt-get install -y openssh-client git jq
        
        # Setup SSH directory
        mkdir -p ~/.ssh
        chmod 700 ~/.ssh
        
        # Write private key with proper formatting
        echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/temp_key
        # Remove any Windows line endings
        sed -i 's/\r$//' ~/.ssh/temp_key
        # Remove any GitHub-added formatting
        sed -i '/^\*\*\*/,/^\*\*\*/d' ~/.ssh/temp_key
        
        # Detect key type and format appropriately
        if grep -q "BEGIN OPENSSH PRIVATE KEY" ~/.ssh/temp_key; then
          echo "Detected OpenSSH format key"
          KEY_FILE=~/.ssh/id_ed25519
          mv ~/.ssh/temp_key $KEY_FILE
        elif grep -q "BEGIN RSA PRIVATE KEY" ~/.ssh/temp_key; then
          echo "Detected RSA format key"
          KEY_FILE=~/.ssh/id_rsa
          mv ~/.ssh/temp_key $KEY_FILE
        else
          echo "=== ERROR: Unknown key format ==="
          cat ~/.ssh/temp_key
          echo "==============================="
          exit 1
        fi
        
        chmod 600 $KEY_FILE
        
        # Verify key format
        echo "=== Key Verification ==="
        ssh-keygen -l -f $KEY_FILE || (echo "Key validation failed" && exit 1)
        echo "======================"
        
        # Start SSH agent
        eval $(ssh-agent -s)
        
        # Add key with retry logic
        MAX_RETRIES=3
        for i in $(seq 1 $MAX_RETRIES); do
          if ssh-add $KEY_FILE; then
            echo "Key added successfully"
            break
          else
            echo "Failed to add key (attempt $i/$MAX_RETRIES)"
            if [ $i -eq $MAX_RETRIES ]; then
              echo "=== SSH Debug Info ==="
              ssh-add -vvv $KEY_FILE || true
              echo "===================="
              exit 1
            fi
            sleep 2
          fi
        done
        
        # Configure known hosts
        ssh-keyscan -H ${{ env.EC2_IP }} >> ~/.ssh/known_hosts
        chmod 600 ~/.ssh/known_hosts
        
        # Test connection
        ssh -T -o StrictHostKeyChecking=no -v ${{ env.SSH_USER }}@${{ env.EC2_IP }} exit || (echo "SSH connection failed" && exit 1)
        
        # Copy update script
        scp -o StrictHostKeyChecking=no ${{ env.UPDATE_SCRIPT }} ${{ env.SSH_USER }}@${{ env.EC2_IP }}:~/ || (echo "SCP failed" && exit 1)
        
        # Execute remote commands
        ssh -o StrictHostKeyChecking=no ${{ env.SSH_USER }}@${{ env.EC2_IP }} << 'EOF'
          # Install required packages
          sudo yum update -y
          sudo yum install -y docker awscli
          
          # Start and enable Docker
          sudo systemctl start docker
          sudo systemctl enable docker
          sudo usermod -aG docker $USER
          
          # Execute update script
          export OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
          export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
          export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
          export AWS_REGION=${{ env.AWS_REGION }}
          chmod +x ~/ec2_update.sh
          ~/ec2_update.sh
        EOF
