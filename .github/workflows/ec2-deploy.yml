name: EC2 Deploy

on:
  workflow_dispatch:
env:
  AWS_REGION: ap-southeast-2
  UPDATE_SCRIPT: .github/workflows/ec2_update.sh
  EC2_IP: 54.252.219.100
  SSH_USER: ec2-user

jobs:
  deploy:
    name: Deploy Docker Images to EC2
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Set up AWS CLI
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup SSH Connection
      id: ssh-setup
      run: |
        # Install dependencies
        sudo apt-get update -y
        sudo apt-get install -y openssh-client git
        
        # Create SSH directory
        mkdir -p ~/.ssh
        chmod 700 ~/.ssh
        
        # Debug: Show secret existence
        echo "Checking if secret exists..."
        if [ -z "${{ secrets.EC2_SSH_PRIVATE_KEY }}" ]; then
          echo "::error::SSH key secret is empty or not set"
          exit 1
        fi
        
        # Write the private key with strict validation
        echo "-----BEGIN OPENSSH PRIVATE KEY-----" > ~/.ssh/id_ed25519
        echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" | \
          sed -e '/-----BEGIN OPENSSH PRIVATE KEY-----/d' \
              -e '/-----END OPENSSH PRIVATE KEY-----/d' \
              -e 's/^[[:space:]]*//' \
              -e 's/[[:space:]]*$//' >> ~/.ssh/id_ed25519
        echo "-----END OPENSSH PRIVATE KEY-----" >> ~/.ssh/id_ed25519
        
        # Verify key file
        echo "=== Key File Info ==="
        ls -la ~/.ssh/id_ed25519
        file ~/.ssh/id_ed25519
        head -n 3 ~/.ssh/id_ed25519
        echo "...[truncated]..."
        tail -n 3 ~/.ssh/id_ed25519
        
        # Set strict permissions
        chmod 600 ~/.ssh/id_ed25519
        
        # Validate key format
        echo "=== Key Validation ==="
        if ! ssh-keygen -l -f ~/.ssh/id_ed25519; then
          echo "::error::Invalid SSH Key Format"
          echo "Debug output:"
          ssh-keygen -l -v -f ~/.ssh/id_ed25519 || true
          exit 1
        fi
        
        # Setup SSH agent
        eval $(ssh-agent -s)
        if ! ssh-add ~/.ssh/id_ed25519; then
          echo "::error::Failed to add SSH key"
          echo "Debug output:"
          ssh-add -l -v || true
          exit 1
        fi
        
        # Add EC2 to known hosts
        ssh-keyscan -H ${{ env.EC2_IP }} >> ~/.ssh/known_hosts
        chmod 600 ~/.ssh/known_hosts

    - name: Deploy to EC2
      if: steps.ssh-setup.outcome == 'success'
      run: |
        # Test connection first
        ssh -o StrictHostKeyChecking=no -T ${{ env.SSH_USER }}@${{ env.EC2_IP }} "echo 'SSH connection successful'"
        
        # Transfer update script
        scp -o StrictHostKeyChecking=no ${{ env.UPDATE_SCRIPT }} ${{ env.SSH_USER }}@${{ env.EC2_IP }}:~/ || {
          echo "::error::Failed to transfer script"
          exit 1
        }
        
        # Execute remote commands
        ssh -o StrictHostKeyChecking=no ${{ env.SSH_USER }}@${{ env.EC2_IP }} << 'DEPLOY_EOF'
          set -ex
          export OPENAI_API_KEY=$OPENAI_API_KEY
          chmod +x ~/ec2_update.sh
          
          # Docker setup
          if ! command -v docker &>/dev/null; then
            sudo yum install -y docker
            sudo systemctl start docker
            sudo usermod -aG docker $USER
          fi
          
          # Permission fix
          sudo chmod 666 /var/run/docker.sock || true
          
          # Execute update
          sudo ~/ec2_update.sh
        DEPLOY_EOF
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
