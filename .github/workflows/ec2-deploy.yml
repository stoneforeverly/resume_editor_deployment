name: EC2 Deploy

on:
  workflow_dispatch:
# Define environment variables  
env:  
  AWS_REGION: ap-southeast-2
  UPDATE_SCRIPT: .github/workflows/ec2_update.sh
  EC2_IP: 3.107.160.80
  SSH_USER: ec2-user

jobs:
  deploy:
    name: Deploy Docker Images to EC2
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Set up AWS CLI
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup SSH and Deploy
      run: |
        # Install dependencies
        sudo apt-get update -y
        sudo apt-get install -y openssh-client git
        
        # Setup SSH directory
        mkdir -p ~/.ssh
        chmod 700 ~/.ssh
        
        # Write private key with proper formatting
        echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        # Remove any carriage returns and ensure proper line endings
        sed -i 's/\r$//' ~/.ssh/id_rsa
        # Ensure key has proper BEGIN/END markers
        if ! grep -q "BEGIN RSA PRIVATE KEY" ~/.ssh/id_rsa; then
          echo "-----BEGIN RSA PRIVATE KEY-----" > ~/.ssh/id_rsa.tmp
          cat ~/.ssh/id_rsa >> ~/.ssh/id_rsa.tmp
          echo "-----END RSA PRIVATE KEY-----" >> ~/.ssh/id_rsa.tmp
          mv ~/.ssh/id_rsa.tmp ~/.ssh/id_rsa
        fi
        chmod 600 ~/.ssh/id_rsa
        
        # Verify key format
        echo "=== Key Content ==="
        head -n 3 ~/.ssh/id_rsa
        echo "..."
        tail -n 3 ~/.ssh/id_rsa
        echo "=================="
        
        # Start SSH agent
        eval $(ssh-agent -s)
        
        # Add key to agent
        if ! ssh-add ~/.ssh/id_rsa; then
          echo "=== SSH-ADD DEBUG ==="
          ssh-keygen -l -f ~/.ssh/id_rsa || echo "Key validation failed"
          echo "===================="
          exit 1
        fi
        
        # Configure known hosts
        ssh-keyscan -H ${{ env.EC2_IP }} >> ~/.ssh/known_hosts
        chmod 600 ~/.ssh/known_hosts
        
        # Test SSH connection
        if ! ssh -T -o StrictHostKeyChecking=no -v ${{ env.SSH_USER }}@${{ env.EC2_IP }} exit; then
          echo "=== SSH DEBUG ==="
          ssh -T -v ${{ env.SSH_USER }}@${{ env.EC2_IP }} exit || true
          echo "================"
          exit 1
        fi
        
        # Copy update script
        scp -o StrictHostKeyChecking=no -r ${{ env.UPDATE_SCRIPT }} ${{ env.SSH_USER }}@${{ env.EC2_IP }}:/home/${{ env.SSH_USER }}/
        
        # Execute remote commands
        ssh -o StrictHostKeyChecking=no ${{ env.SSH_USER }}@${{ env.EC2_IP }} << 'EOF'
          export OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
          chmod +x /home/${{ env.SSH_USER }}/ec2_update.sh
          /home/${{ env.SSH_USER }}/ec2_update.sh
        EOF
