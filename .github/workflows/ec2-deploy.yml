name: EC2 Deploy

on:
  workflow_dispatch:
env:
  AWS_REGION: ap-southeast-2
  UPDATE_SCRIPT: .github/workflows/ec2_update.sh
  EC2_IP: 54.252.219.100
  SSH_USER: ec2-user

jobs:
  deploy:
    name: Deploy Docker Images to EC2
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Set up AWS CLI
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup SSH Connection
      id: ssh-setup
      run: |
        # Install dependencies
        sudo apt-get update -y
        sudo apt-get install -y openssh-client git jq
        
        # Setup SSH directory
        mkdir -p ~/.ssh
        chmod 700 ~/.ssh
        
        # Write private key with proper formatting
        echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/temp_key
        # Remove Windows line endings and GitHub formatting
        sed -i 's/\r$//' ~/.ssh/temp_key
        sed -i '/^\*\*\*/,/^\*\*\*/d' ~/.ssh/temp_key
        
        # Reconstruct key with proper headers
        {
          echo "-----BEGIN OPENSSH PRIVATE KEY-----"
          grep -v 'PRIVATE KEY' ~/.ssh/temp_key | tr -d '\r'
          echo "-----END OPENSSH PRIVATE KEY-----"
        } > ~/.ssh/id_ed25519
        
        chmod 600 ~/.ssh/id_ed25519
        
        # Verify key
        echo "=== Key Verification ==="
        ssh-keygen -l -f ~/.ssh/id_ed25519 || (echo "Key validation failed" && exit 1)
        
        # Start SSH agent
        eval $(ssh-agent -s)
        ssh-add ~/.ssh/id_ed25519 || (echo "Failed to add key to agent" && exit 1)
        
        # Configure known hosts
        ssh-keyscan -H ${{ env.EC2_IP }} > ~/.ssh/known_hosts
        chmod 600 ~/.ssh/known_hosts

    - name: Deploy Application
      if: steps.ssh-setup.outcome == 'success'
      run: |
        # Copy update script
        scp -o StrictHostKeyChecking=no ${{ env.UPDATE_SCRIPT }} ${{ env.SSH_USER }}@${{ env.EC2_IP }}:~/ec2_update.sh
        
        # Execute remote commands
        ssh -o StrictHostKeyChecking=no ${{ env.SSH_USER }}@${{ env.EC2_IP }} << 'EOF'
          set -e
          export OPENAI_API_KEY=$OPENAI_API_KEY
          chmod +x ~/ec2_update.sh
          sudo ~/ec2_update.sh
        EOF
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
