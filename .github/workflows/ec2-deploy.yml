name: EC2 Deploy

on:
  workflow_dispatch:
env:  
  AWS_REGION: ap-southeast-2
  UPDATE_SCRIPT: .github/workflows/ec2_update.sh
  EC2_IP: 3.107.160.80
  SSH_USER: ec2-user

jobs:
  deploy:
    name: Deploy Docker Images to EC2
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Set up AWS CLI
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup SSH and Deploy
      run: |
        # Install dependencies
        sudo apt-get update -y
        sudo apt-get install -y openssh-client git
        
        # Setup SSH directory
        mkdir -p ~/.ssh
        chmod 700 ~/.ssh
        
        # Write private key with multi-line handling
        echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" | while read -r line; do
          # Skip empty lines and GitHub's potential formatting
          if [[ -n "$line" && ! "$line" =~ ^\*\*\* ]]; then
            echo "$line" >> ~/.ssh/temp_key
          fi
        done
        
        # Detect key type and format appropriately
        if grep -q "BEGIN OPENSSH PRIVATE KEY" ~/.ssh/temp_key; then
          echo "Detected OpenSSH format key"
          mv ~/.ssh/temp_key ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          KEY_FILE=~/.ssh/id_ed25519
        elif grep -q "BEGIN RSA PRIVATE KEY" ~/.ssh/temp_key; then
          echo "Detected RSA format key"
          mv ~/.ssh/temp_key ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          KEY_FILE=~/.ssh/id_rsa
        else
          echo "=== ERROR: Unknown key format ==="
          cat ~/.ssh/temp_key
          echo "==============================="
          exit 1
        fi
        
        # Verify key
        echo "=== Key Info ==="
        file $KEY_FILE
        ssh-keygen -l -f $KEY_FILE || echo "Key verification failed"
        echo "================"
        
        # Start SSH agent
        eval $(ssh-agent -s)
        
        # Add key
        if ! ssh-add $KEY_FILE; then
          echo "=== SSH Debug ==="
          ssh-add -vvv $KEY_FILE || true
          echo "================"
          exit 1
        fi
        
        # Configure known hosts
        ssh-keyscan -H ${{ env.EC2_IP }} >> ~/.ssh/known_hosts
        chmod 600 ~/.ssh/known_hosts
        
        # Test connection
        ssh -T -o StrictHostKeyChecking=no -v ${{ env.SSH_USER }}@${{ env.EC2_IP }} exit
        
        # Deploy
        scp -o StrictHostKeyChecking=no ${{ env.UPDATE_SCRIPT }} ${{ env.SSH_USER }}@${{ env.EC2_IP }}:~/ 
        ssh -o StrictHostKeyChecking=no ${{ env.SSH_USER }}@${{ env.EC2_IP }} << 'EOF'
          export OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
          chmod +x ~/ec2_update.sh
          ~/ec2_update.sh
        EOF
