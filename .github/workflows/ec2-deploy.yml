name: EC2 Deploy

on:
  workflow_dispatch:
env:
  AWS_REGION: ap-southeast-2
  UPDATE_SCRIPT: .github/workflows/ec2_update.sh
  EC2_IP: 54.252.219.100
  SSH_USER: ec2-user

jobs:
  deploy:
    name: Deploy Docker Images to EC2
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Set up AWS CLI
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup SSH Connection
      id: ssh-setup
      run: |
        # Install dependencies
        sudo apt-get update -y
        sudo apt-get install -y openssh-client git
        
        # Setup SSH directory
        mkdir -p ~/.ssh
        chmod 700 ~/.ssh
        
        # Write private key with proper formatting
        echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
        chmod 600 ~/.ssh/id_ed25519
        
        # Verify key
        echo "=== Key Info ==="
        ssh-keygen -l -f ~/.ssh/id_ed25519 || exit 1
        
        # Start SSH agent
        eval $(ssh-agent -s)
        ssh-add ~/.ssh/id_ed25519 || exit 1
        
        # Configure known hosts
        ssh-keyscan -H ${{ env.EC2_IP }} >> ~/.ssh/known_hosts
        chmod 600 ~/.ssh/known_hosts
        
        # Test connection
        ssh -T -o StrictHostKeyChecking=no -v ${{ env.SSH_USER }}@${{ env.EC2_IP }} exit || exit 1

    - name: Deploy Application
      if: steps.ssh-setup.outcome == 'success'
      run: |
        # Copy update script with retry
        for i in {1..3}; do
          if scp -o StrictHostKeyChecking=no ${{ env.UPDATE_SCRIPT }} ${{ env.SSH_USER }}@${{ env.EC2_IP }}:~/; then
            break
          else
            echo "SCP attempt $i failed, retrying..."
            sleep 5
          fi
        done
        
        # Execute remote commands with error handling
        ssh -o StrictHostKeyChecking=no ${{ env.SSH_USER }}@${{ env.EC2_IP }} << 'EOF'
          set -e
          export OPENAI_API_KEY=$OPENAI_API_KEY
          chmod +x ~/ec2_update.sh
          
          # Check Docker status
          if ! command -v docker &> /dev/null; then
            echo "Installing Docker..."
            sudo yum install -y docker
            sudo systemctl start docker
            sudo usermod -aG docker $USER
          fi
          
          # Run update script with Docker privileges
          sudo ~/ec2_update.sh || {
            echo "Update script failed, checking Docker status..."
            sudo systemctl status docker
            exit 1
          }
        EOF
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
