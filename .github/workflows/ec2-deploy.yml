name: EC2 Deploy

on:
  workflow_dispatch:
env:
  AWS_REGION: ap-southeast-2
  UPDATE_SCRIPT: .github/workflows/ec2_update.sh
  EC2_IP: 54.252.219.100
  SSH_USER: ec2-user

jobs:
  deploy:
    name: Deploy Docker Images to EC2
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Set up AWS CLI
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup SSH Connection
      run: |
        # Install dependencies
        sudo apt-get update -y
        sudo apt-get install -y openssh-client git
        
        # Setup SSH directory
        mkdir -p ~/.ssh
        chmod 700 ~/.ssh
        
        # Write private key with exact formatting
        cat << 'EOF' > ~/.ssh/id_ed25519
        ${{ secrets.EC2_SSH_PRIVATE_KEY }}
        EOF
        
        # Process key file
        sed -i '/^-----BEGIN OPENSSH PRIVATE KEY-----$/,/^-----END OPENSSH PRIVATE KEY-----$/!d' ~/.ssh/id_ed25519
        sed -i '/^$/d' ~/.ssh/id_ed25519
        chmod 600 ~/.ssh/id_ed25519
        
        # Verify key
        echo "=== Key Content ==="
        head -n 3 ~/.ssh/id_ed25519
        echo "..."
        tail -n 3 ~/.ssh/id_ed25519
        echo "=================="
        
        if ! ssh-keygen -l -f ~/.ssh/id_ed25519; then
          echo "=== HEX DUMP ==="
          hexdump -C ~/.ssh/id_ed25519 | head -n 10
          echo "==============="
          exit 1
        fi
        
        # Start SSH agent
        eval $(ssh-agent -s)
        if ! ssh-add ~/.ssh/id_ed25519; then
          echo "=== SSH-ADD DEBUG ==="
          ssh-add -vvv ~/.ssh/id_ed25519
          exit 1
        fi
        
        # Configure known hosts
        ssh-keyscan -H ${{ env.EC2_IP }} > ~/.ssh/known_hosts
        chmod 600 ~/.ssh/known_hosts

    - name: Test Connection
      run: |
        ssh -T -o StrictHostKeyChecking=no -v ${{ env.SSH_USER }}@${{ env.EC2_IP }} << 'EOF'
          echo "Connection successful!"
          echo "Docker status: $(sudo systemctl is-active docker)"
        EOF

    - name: Deploy
      run: |
        scp -o StrictHostKeyChecking=no ${{ env.UPDATE_SCRIPT }} ${{ env.SSH_USER }}@${{ env.EC2_IP }}:~/
        ssh -o StrictHostKeyChecking=no ${{ env.SSH_USER }}@${{ env.EC2_IP }} << 'EOF'
          set -ex
          chmod +x ~/ec2_update.sh
          sudo ~/ec2_update.sh
        EOF
