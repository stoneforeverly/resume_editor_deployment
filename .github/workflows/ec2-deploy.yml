name: EC2 Deploy

on:
  workflow_dispatch:
env:
  AWS_REGION: ap-southeast-2
  UPDATE_SCRIPT: .github/workflows/ec2_update.sh
  EC2_IP: 13.236.165.153
  SSH_USER: ec2-user  # 对于Ubuntu实例改为'ubuntu'

jobs:
  deploy:
    name: Deploy Docker Images to EC2
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Set up AWS CLI
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup SSH Connection
      id: ssh-setup
      run: |
        set -ex  # 启用详细日志和错误退出
        
        # 安装依赖
        sudo apt-get update -y
        sudo apt-get install -y openssh-client git jq curl
        
        # 创建SSH配置
        mkdir -p ~/.ssh
        chmod 700 ~/.ssh
        
        # 获取Runner公共IP用于安全组调试
        RUNNER_IP=$(curl -s https://api.ipify.org)
        echo "::notice::Runner Public IP: $RUNNER_IP"
        
        # 写入私钥
        echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
        chmod 600 ~/.ssh/id_ed25519
        
        # 验证密钥
        if ! ssh-keygen -l -f ~/.ssh/id_ed25519; then
          echo "::error::SSH Key Validation Failed"
          exit 1
        fi
        
        # 配置SSH
        eval $(ssh-agent -s)
        ssh-add ~/.ssh/id_ed25519
        
        # 禁用严格主机检查（临时方案）
        echo -e "Host ${{ env.EC2_IP }}\n  StrictHostKeyChecking no\n  UserKnownHostsFile=/dev/null" > ~/.ssh/config
        
        # 测试连接（简化版）
        if ! ssh -o ConnectTimeout=15 -T ${{ env.SSH_USER }}@${{ env.EC2_IP }} "echo 'SSH Test Successful'"; then
          echo "::error::SSH Connection Failed"
          echo "Debug Info:"
          echo "1. 确保EC2安全组已放行IP: $RUNNER_IP"
          echo "2. 确认用户名正确: ${{ env.SSH_USER }}"
          echo "3. 检查EC2实例是否运行SSH服务"
          exit 1
        fi

    - name: Deploy to EC2
      if: steps.ssh-setup.outcome == 'success'
      run: |
        set -ex
        echo "=== 传输更新脚本 ==="
        scp -o ConnectTimeout=15 ${{ env.UPDATE_SCRIPT }} ${{ env.SSH_USER }}@${{ env.EC2_IP }}:~/ || {
          echo "::error::文件传输失败"
          exit 1
        }
        
        echo "=== 执行远程部署 ==="
        ssh -o ConnectTimeout=15 ${{ env.SSH_USER }}@${{ env.EC2_IP }} <<'DEPLOY_EOF'
          set -ex
          export OPENAI_API_KEY=$OPENAI_API_KEY
          
          # 安装Docker（兼容多平台）
          if ! command -v docker &>/dev/null; then
            if [ -f /etc/redhat-release ]; then
              sudo yum install -y docker
            elif [ -f /etc/lsb-release ]; then
              sudo apt-get update
              sudo apt-get install -y docker.io
            fi
            sudo systemctl start docker
            sudo usermod -aG docker $(whoami)
          fi
          
          # 执行更新
          chmod +x ~/ec2_update.sh
          sudo ~/ec2_update.sh
        DEPLOY_EOF
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
