name: EC2 Deploy

on:
  workflow_dispatch:
env:
  AWS_REGION: ap-southeast-2
  UPDATE_SCRIPT: .github/workflows/ec2_update.sh
  EC2_IP: 3.107.160.80
  SSH_USER: ec2-user

jobs:
  deploy:
    name: Deploy Docker Images to EC2
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Set up AWS CLI
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup SSH Connection
      run: |
        # Install dependencies
        sudo apt-get update -y
        sudo apt-get install -y openssh-client git
        
        # Setup SSH directory
        mkdir -p ~/.ssh
        chmod 700 ~/.ssh
        
        # Write private key with proper formatting
        echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
        chmod 600 ~/.ssh/id_ed25519
        
        # Start SSH agent
        eval $(ssh-agent -s)
        ssh-add ~/.ssh/id_ed25519
        
        # Configure known hosts
        ssh-keyscan -H ${{ env.EC2_IP }} >> ~/.ssh/known_hosts
        chmod 600 ~/.ssh/known_hosts

    - name: Deploy to EC2
      run: |
        # Prepare and execute remote commands
        ssh -o StrictHostKeyChecking=no ${{ env.SSH_USER }}@${{ env.EC2_IP }} << 'EOF'
          # Install Docker if not exists
          if ! command -v docker &> /dev/null; then
            sudo yum update -y
            sudo yum install -y docker
            sudo systemctl start docker
            sudo systemctl enable docker
          fi
          
          # Add user to docker group and refresh permissions
          sudo usermod -aG docker $USER
          newgrp docker << INNER
            # Install AWS CLI if not exists
            if ! command -v aws &> /dev/null; then
              sudo yum install -y awscli
            fi
            
            # Login to ECR
            aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com
            
            # Copy update script
            cat > ~/ec2_update.sh << 'SCRIPT'
              #!/bin/bash
              # Stop and remove existing containers
              docker stop editor-frontend editor-backend market-frontend market-backend || true
              docker rm editor-frontend editor-backend market-frontend market-backend || true
              
              # Pull new images
              docker pull $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/editor-frontend:latest
              docker pull $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/editor-backend:latest
              docker pull $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/market-frontend:latest
              docker pull $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/market-backend:latest
              
              # Run containers
              docker run -d --name editor-frontend -p 3000:3000 $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/editor-frontend:latest
              docker run -d --name editor-backend -p 5000:5000 $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/editor-backend:latest
              docker run -d --name market-frontend -p 3001:3000 $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/market-frontend:latest
              docker run -d --name market-backend -p 5001:5000 $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/market-backend:latest
            SCRIPT
            chmod +x ~/ec2_update.sh
            
            # Execute update script with environment variables
            export AWS_ACCOUNT_ID=$AWS_ACCOUNT_ID
            export AWS_REGION=$AWS_REGION
            export OPENAI_API_KEY=$OPENAI_API_KEY
            ~/ec2_update.sh
          INNER
        EOF
      env:
        AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
