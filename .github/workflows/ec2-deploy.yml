name: EC2 Deploy

on:
  workflow_dispatch:
env:
  AWS_REGION: ap-southeast-2
  UPDATE_SCRIPT: .github/workflows/ec2_update.sh
  EC2_IP: 3.104.77.41
  SSH_USER: ec2-user  # Ubuntu系统改为'ubuntu'

jobs:
  deploy:
    name: Deploy Docker Images to EC2
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Update Security Group
      run: |
        set -ex
        # 自动更新安全组规则
        RUNNER_IP=$(curl -s https://api.ipify.org)
        aws ec2 authorize-security-group-ingress \
          --group-id ${{ secrets.EC2_SECURITY_GROUP_ID }} \
          --protocol tcp \
          --port 22 \
          --cidr $RUNNER_IP/32

    - name: Setup SSH Connection
      id: ssh-setup
      run: |
        set -ex
        # 安装依赖
        sudo apt-get update -y
        sudo apt-get install -y openssh-client netcat

        # 配置SSH
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
        chmod 600 ~/.ssh/id_ed25519

        # 测试端口连通性
        if ! nc -zv -w 15 ${{ env.EC2_IP }} 22; then
          echo "::error::Port 22 not reachable"
          exit 1
        fi

        # 配置免验证
        echo -e "Host ${{ env.EC2_IP }}\n  StrictHostKeyChecking no\n  UserKnownHostsFile=/dev/null" > ~/.ssh/config

        # 测试连接
        if ! ssh -o ConnectTimeout=15 -T ${{ env.SSH_USER }}@${{ env.EC2_IP }} "echo 'SSH成功'"; then
          echo "::error::SSH连接失败"
          exit 1
        fi

    - name: Deploy to EC2
      if: steps.ssh-setup.outcome == 'success'
      run: |
        set -ex
        scp ${{ env.UPDATE_SCRIPT }} ${{ env.SSH_USER }}@${{ env.EC2_IP }}:~
        ssh ${{ env.SSH_USER }}@${{ env.EC2_IP }} <<'EOF'
          set -ex
          chmod +x ~/ec2_update.sh
          sudo ~/ec2_update.sh
        EOF

    - name: Cleanup Security Group
      if: always()
      run: |
        set -ex
        RUNNER_IP=$(curl -s https://api.ipify.org)
        aws ec2 revoke-security-group-ingress \
          --group-id ${{ secrets.EC2_SECURITY_GROUP_ID }} \
          --protocol tcp \
          --port 22 \
          --cidr $RUNNER_IP/32
