name: EC2 Construct 

on: 
  workflow_dispatch: 
    inputs:
      compose-file-path:
        description: "Docker Compose文件路径"
        required: true
        default: "./resumeAPI/docker-compose.yml"
  
env: 
  AWS_REGION: ap-southeast-2 
 
jobs: 
  terraform: 
    name: Apply Terraform configuration 
    runs-on: ubuntu-latest 
    defaults: 
      run: 
        working-directory: ./ec2/ 

    steps: 
      - name: Checkout terraform code 
        uses: actions/checkout@v4

      - name: Set up Terraform 
        uses: hashicorp/setup-terraform@v2 
        with: 
          terraform_version: 1.0.0 

      - name: Configure AWS Credentials 
        uses: aws-actions/configure-aws-credentials@v2
        with: 
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }} 
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} 
          aws-region: ${{ env.AWS_REGION }} 

      - name: Terraform Init & Plan 
        run: |
          terraform init
          terraform plan 

      - name: Terraform Apply 
        if: github.ref == 'refs/heads/main' 
        run: terraform apply -auto-approve 

      - name: Get EC2 IP 
        id: get-ip
        run: |
          # 精确提取IP并验证格式
          IP=$(terraform output -raw instance_public_ip | grep -Eo '([0-9]{1,3}\.){3}[0-9]{1,3}')
          if [[ -z "$IP" ]]; then
            echo "::error::无法提取有效IP地址"
            exit 1
          fi
          
          # 同时设置输出和环境变量
          echo "ip_address=$IP" >> $GITHUB_OUTPUT
          echo "IP_ADDRESS=$IP" >> $GITHUB_ENV
          echo "提取的IP地址: $IP"

  trigger-remote-build:
    name: Trigger remote repository build
    needs: terraform
    runs-on: ubuntu-latest
    steps:
      - name: Setup IP
        id: setup-ip
        run: |
          # 优先从needs获取，失败则从环境变量获取
          IP="${{ needs.terraform.outputs.ip_address || env.IP_ADDRESS }}"
          if [[ -z "$IP" ]]; then
            echo "::error::未获取到IP地址"
            exit 1
          fi
          echo "使用的IP地址: $IP"
          echo "final_ip=$IP" >> $GITHUB_OUTPUT

      - name: Verify target workflow
        uses: actions/github-script@v6
        id: verify-workflow
        with:
          script: |
            try {
              const workflow = await github.rest.actions.getWorkflow({
                owner: 'QiushiZhou',
                repo: 'resumeAPI',
                workflow_id: 'build-push.yml'
              })
              console.log('目标工作流接受的输入参数:', workflow.data.inputs)
              return workflow.data.inputs
            } catch (error) {
              core.setFailed(`获取工作流信息失败: ${error}`)
            }

      - name: Trigger remote workflow
        uses: actions/github-script@v6
        with:
          script: |
            try {
              // 使用目标工作流实际接受的参数名
              await github.rest.actions.createWorkflowDispatch({
                owner: 'QiushiZhou',
                repo: 'resumeAPI',
                workflow_id: 'build-push.yml',
                ref: 'main',
                inputs: {
                  // 示例参数名，需根据上一步输出调整
                  host: `http://${{ steps.setup-ip.outputs.final_ip }}`,
                  compose_path: `${{ github.event.inputs.compose-file-path }}`
                }
              })
              console.log('工作流触发成功')
            } catch (error) {
              core.setFailed(`触发失败: ${error.message}`)
              console.log('请检查目标工作流是否正确定义了输入参数')
            }
