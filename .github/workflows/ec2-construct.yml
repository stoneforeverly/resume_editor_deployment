name: EC2 Construct 

on: 
  workflow_dispatch: 
    inputs:
      compose-file-path:
        description: "Docker Compose文件路径"
        required: true
        default: "./resumeAPI/docker-compose.yml"
  
env: 
  AWS_REGION: ap-southeast-2 
 
jobs: 
  terraform: 
    name: Apply Terraform configuration 
    runs-on: ubuntu-latest 
    defaults: 
      run: 
        working-directory: ./ec2/ 

    steps: 
      - name: Checkout terraform code 
        uses: actions/checkout@v4

      - name: Set up Terraform 
        uses: hashicorp/setup-terraform@v2 
        with: 
          terraform_version: 1.0.0 

      - name: Configure AWS Credentials 
        uses: aws-actions/configure-aws-credentials@v2
        with: 
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }} 
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} 
          aws-region: ${{ env.AWS_REGION }} 

      - name: Terraform Init & Plan 
        run: |
          terraform init
          terraform plan 

      - name: Terraform Apply 
        if: github.ref == 'refs/heads/main' 
        run: terraform apply -auto-approve 

      - name: Get EC2 IP 
        id: get-ip
        run: |
          # 精确提取IP并验证格式
          RAW_IP=$(terraform output -raw instance_public_ip)
          IP=$(echo "$RAW_IP" | grep -Eo '([0-9]{1,3}\.){3}[0-9]{1,3}' | head -1)
          
          if [[ -z "$IP" ]]; then
            echo "::error::无法提取有效IP地址，原始输出: $RAW_IP"
            exit 1
          fi
          
          # 在工作目录内创建ip_data文件夹
          mkdir -p ip_data
          echo "${IP}" > ip_data/ip.txt
          echo "提取的IP地址: ${IP}"

      - name: Upload IP data
        uses: actions/upload-artifact@v4
        with:
          name: ip-data
          path: ec2/ip_data/ip.txt  # 使用相对于仓库根目录的路径
          retention-days: 1

  trigger-remote-build:
    name: Trigger remote repository build
    needs: terraform
    runs-on: ubuntu-latest
    steps:
      # ... (前面的下载IP步骤保持不变) ...

      - name: Trigger remote workflow
        uses: actions/github-script@v6
        env:
          PAT: ${{ secrets.PAT }}
        with:
          script: |
            const { PAT } = process.env;
            const ip = `${{ steps.read-ip.outputs.final_ip }}`;
            const composePath = `${{ github.event.inputs.compose-file-path }}`;
            
            try {
              // 使用内置的github对象而不是Octokit
              console.log('准备触发远程工作流...');
              
              // 1. 首先检查工作流是否存在
              const workflow = await github.rest.actions.getWorkflow({
                owner: 'QiushiZhou',
                repo: 'resumeAPI',
                workflow_id: 'build-push.yml'
              });
              
              console.log('目标工作流输入参数:', workflow.data.inputs);
              
              // 2. 使用内置的github对象触发工作流
              const response = await github.rest.actions.createWorkflowDispatch({
                owner: 'QiushiZhou',
                repo: 'resumeAPI',
                workflow_id: 'build-push.yml',
                ref: 'main',
                inputs: {
                  // 根据实际需要调整参数名
                  host: `http://${ip}`,
                  compose_file: composePath
                }
              });
              
              console.log(`成功触发工作流，状态码: ${response.status}`);
              console.log(`使用的IP地址: ${ip}`);
            } catch (error) {
              core.setFailed(`触发失败: ${error.message}`);
              console.log('详细错误信息:', error.response?.data || error);
              console.log('建议检查:');
              console.log('1. PAT是否有repo和workflow权限');
              console.log('2. 目标工作流是否存在且参数名匹配');
              console.log('3. 目标仓库是否可访问');
              console.log('4. 输入参数:', { host: `http://${ip}`, compose_file: composePath });
            }
