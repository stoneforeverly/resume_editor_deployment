name: EC2 Construct 

on: 
  workflow_dispatch: 
    inputs:
      compose-file-path:
        description: "Docker Compose文件路径"
        required: true
        default: "./resumeAPI/docker-compose.yml"
  
env: 
  AWS_REGION: ap-southeast-2 
 
jobs: 
  terraform: 
    name: Apply Terraform configuration 
    runs-on: ubuntu-latest 
    defaults: 
      run: 
        working-directory: ./ec2/ 

    steps: 
      - name: Checkout terraform code 
        uses: actions/checkout@v4

      - name: Set up Terraform 
        uses: hashicorp/setup-terraform@v2 
        with: 
          terraform_version: 1.0.0 

      - name: Configure AWS Credentials 
        uses: aws-actions/configure-aws-credentials@v2
        with: 
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }} 
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} 
          aws-region: ${{ env.AWS_REGION }} 

      - name: Terraform Init & Plan 
        run: |
          terraform init
          terraform plan 

      - name: Terraform Apply 
        if: github.ref == 'refs/heads/main' 
        run: terraform apply -auto-approve 

      - name: Get and store EC2 IP 
        id: get-ip
        run: |
          # 提取IP并去除所有非IP字符
          IP=$(terraform output -raw instance_public_ip | grep -Eo '([0-9]{1,3}\.){3}[0-9]{1,3}' | head -1)
          
          # 验证IP格式
          if [[ ! $IP =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
            echo "::error::无效的IP地址格式: $IP"
            exit 1
          fi
          
          # 使用新语法设置输出
          echo "ip_address=${IP}" >> ${GITHUB_OUTPUT}
          
          # 将IP写入文件供后续步骤使用
          mkdir -p ip_data
          echo "${IP}" > ip_data/ip.txt
          echo "提取的IP地址: ${IP}"

      - name: Upload IP file
        uses: actions/upload-artifact@v4
        with:
          name: ip-data
          path: ec2/ip_data/ip.txt
          retention-days: 1

  trigger-remote-build:
    name: Trigger remote repository build
    needs: terraform
    runs-on: ubuntu-latest
    steps:
      - name: Trigger remote workflow
        uses: actions/github-script@v6
        env:
          PAT: ${{ secrets.PAT_WITH_WORKFLOW_ACCESS }}
        with:
          script: |
            const { PAT } = process.env;
            const ip = `${{ steps.read-ip.outputs.final_ip }}`;
            const composePath = `${{ github.event.inputs.compose-file-path }}`;
            
            try {
              // 使用正确的Octokit初始化方式
              const { Octokit } = require("@octokit/rest");
              const octokit = new Octokit({ auth: PAT });
              
              // 1. 首先获取目标工作流定义
              const workflow = await octokit.rest.actions.getWorkflow({
                owner: 'QiushiZhou',
                repo: 'resumeAPI',
                workflow_id: 'build-push.yml'
              });
              
              console.log('目标工作流输入参数:', workflow.data.inputs);
              
              // 2. 触发工作流
              const response = await octokit.rest.actions.createWorkflowDispatch({
                owner: 'QiushiZhou',
                repo: 'resumeAPI',
                workflow_id: 'build-push.yml',
                ref: 'main',
                inputs: {
                  VITE_SERVER_HOST: `http://${ip}`,
                  DOCKER_COMPOSE_FILE: composePath
                }
              });
              
              console.log(`成功触发工作流，状态码: ${response.status}`);
              console.log(`使用的IP地址: ${ip}`);
            } catch (error) {
              core.setFailed(`触发失败: ${error.message}`);
              console.log('详细错误信息:', error.response?.data || error);
              console.log('建议检查:');
              console.log('1. PAT是否有repo和workflow权限');
              console.log('2. 目标工作流是否存在且参数名匹配');
              console.log('3. 目标仓库是否可访问');
            }
